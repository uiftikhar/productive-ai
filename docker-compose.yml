version: '3.8'

services:
  server:
    build:
      context: .
      dockerfile: server/Dockerfile
      target: production
    ports:
      - "3000:3000"
    env_file:
      - server/.env
    environment:
      - PORT=3000
      - HOST=0.0.0.0
      - NODE_ENV=production
      - DB_TYPE=${DB_TYPE}
      - DB_DATABASE=${DB_DATABASE}
      - DB_SYNCHRONIZE=${DB_SYNCHRONIZE}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      - LOG_LEVEL=${LOG_LEVEL}
      - USE_MOCK_IMPLEMENTATIONS=${USE_MOCK_IMPLEMENTATIONS}
      - MONGO_DB_PASSWORD=${MONGO_DB_PASSWORD}
      - MONGO_DB_USERNAME=${MONGO_DB_USERNAME}
      - MONGO_DB_URI=${MONGO_DB_URI}
      # - MONGO_DB_URI=mongodb://${MONGO_DB_USERNAME}:${MONGO_DB_PASSWORD}@mongo:27017
      - MEM0_API_KEY=${MEM0_API_KEY}
      - MEM0_ORGANIZATION_NAME=${MEM0_ORGANIZATION_NAME}
      - MEM0_ORGANIZATION_ID=${MEM0_ORGANIZATION_ID}
      - MEM0_PROJECT_NAME=${MEM0_PROJECT_NAME}
      - MEM0_PROJECT_ID=${MEM0_PROJECT_ID}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_REGION=${PINECONE_REGION}
      - PINECONE_CLOUD=${PINECONE_CLOUD}
      - PINECONE_DIMENSIONS=${PINECONE_DIMENSIONS}
      - DEFAULT_LLM_MODEL=${DEFAULT_LLM_MODEL}
      - LLM_PROVIDER=${LLM_PROVIDER}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AGENT_TEMPERATURE=${AGENT_TEMPERATURE}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL}
      - LANGSMITH_TRACING=${LANGSMITH_TRACING}
      - LANGSMITH_ENDPOINT=${LANGSMITH_ENDPOINT}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - LANGSMITH_PROJECT=${LANGSMITH_PROJECT}
      - LANGSMITH_ORG_ID=${LANGSMITH_ORG_ID}
      - LANGSMITH_WORKSPACE_ID=${LANGSMITH_WORKSPACE_ID}
      - LANGSMITH_PROJECT_ID=${LANGSMITH_PROJECT_ID}
      - ENABLE_TRACING=${ENABLE_TRACING}
      - TRACE_PROJECT_NAME=${TRACE_PROJECT_NAME}
      - TRACE_LOG_TO_FILE=${TRACE_LOG_TO_FILE}
      - TRACE_LOG_DIRECTORY=${TRACE_LOG_DIRECTORY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=${REDIS_DB}
      - DISABLE_MSW=true
    volumes:
      - server-data:/app/data
    restart: unless-stopped
    depends_on:
      - mongo
    networks:
      - app-network

  client:
    build:
      context: .
      dockerfile: client/Dockerfile
      target: production
    ports:
      - "8080:8080"
    env_file:
      - client/.env.production
    environment:
      - NODE_ENV=production
      - PORT=8080
      # For server-side API calls (from container to container)
      - NEXT_PUBLIC_API_URL=http://server:3000
      - NEXT_PUBLIC_WS_URL=ws://server:3000
      - NEXTAUTH_URL=http://server:3000
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      # Add this to help with browser-side API calls
      - NEXT_PUBLIC_BROWSER_API_URL=http://localhost:3000
      - NEXT_PUBLIC_BROWSER_WS_URL=ws://localhost:3000
      - DISABLE_MSW=true
    restart: unless-stopped
    depends_on:
      - server
    networks:
      - app-network

  mongo:
    image: mongo:6
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_DB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_DB_PASSWORD}
    networks:
      - app-network

volumes:
  mongo-data:
  server-data:

# Docker Compose will automatically use variables from .env file
# All environment variables are defined in the .env file at the root level
# The project includes a .env.example file that can be copied to .env

networks:
  app-network:
    driver: bridge